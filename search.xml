<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hadoop</title>
    <url>/2020/05/09/Hadoop%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<p><img src="http://oss.forestyoung.top/river-5134258_1920.jpg" alt=""></p>
<a id="more"></a>

<h3 id="jdk安装"><a href="#jdk安装" class="headerlink" title="jdk安装"></a>jdk安装</h3><p>系统：CentOS</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看yum包含的jdk版本</span></span><br><span class="line">[root@ ~]# yum search java</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装JDK</span></span><br><span class="line">[root@ ~]# yum install java-1.8.0-openjdk-devel.x86_64</span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置环境变量前，需要定位到jdk安装目录</span></span><br><span class="line">[root@ ~]# which java</span><br><span class="line">/usr/bin/java</span><br><span class="line"><span class="meta">#</span><span class="bash"> 再找到/usr/bin/java的超链接位置发现还是超链接</span></span><br><span class="line">[root@ ~]# ls -lrt /usr/bin/java</span><br><span class="line">/usr/bin/java -&gt; /etc/alternatives/java</span><br><span class="line"><span class="meta">#</span><span class="bash"> 对超链接再次查询，发现最终位置</span></span><br><span class="line">[root@ ~]# ls -lrt /etc/alternatives/java</span><br><span class="line">/etc/alternatives/java -&gt; /usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-0.el8_1.x86_64/jre/bin/java</span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置环境变量</span></span><br><span class="line">[root@ ~]# vim /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置下列信息，JAVA_HOME需要配置为刚查询出来的jdk目录</span></span><br><span class="line">export JAVA_HOME=/usr/lib/jvm/java-1.8.0-openjdk-1.8.0.242.b08-0.el8_1.x86_64/</span><br><span class="line">export JRE_HOME=$JAVA_HOME/jre</span><br><span class="line">export CLASSPATH=$JAVA_HOME/lib:$JRE_HOME/lib:$CLASSPATH</span><br><span class="line">export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH</span><br><span class="line"><span class="meta">#</span><span class="bash"> 使配置生效</span></span><br><span class="line">[root@ ~]# source /etc/profile</span><br></pre></td></tr></table></figure>

<h3 id="Hadoop安装"><a href="#Hadoop安装" class="headerlink" title="Hadoop安装"></a>Hadoop安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载包</span></span><br><span class="line">[root@ ~]# wget http://mirror.bit.edu.cn/apache/hadoop/common/hadoop-3.1.3/hadoop-3.1.3.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压</span></span><br><span class="line">[root@ ~]# tar -zxvf hadoop-3.1.3.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置</span></span><br><span class="line">[root@ ~]# cd /hadoop-3.1.3/etc/hadoop</span><br><span class="line"><span class="meta">#</span><span class="bash"> 三个配置文件配置core-site.xml，hdfs-site.xml，mapred-site.xml</span></span><br></pre></td></tr></table></figure>



<h2 id="Hadoop运行模式"><a href="#Hadoop运行模式" class="headerlink" title="Hadoop运行模式"></a>Hadoop运行模式</h2><ul>
<li>本地模式</li>
<li>伪分布式</li>
<li>完全分布式</li>
<li></li>
</ul>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>Java数字金额大写转换</title>
    <url>/2019/03/17/Java%E6%95%B0%E5%AD%97%E9%87%91%E9%A2%9D%E5%A4%A7%E5%86%99%E8%BD%AC%E6%8D%A2/</url>
    <content><![CDATA[<p><img src="http://oss.forestyoung.top/Java%E6%95%B0%E5%AD%97%E9%87%91%E9%A2%9D.jpg" alt=""></p>
<a id="more"></a>

<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>在工作中遇到结算单报表打印的需求，需要展示中文大写金额，为赶时间首先当然是google了(真实情况是觉得自己水平不够，写出来的util会有问题)</p>
<h3 id="最初（来自CSDN，看到的也是转载贴，未注明出处，侵删）"><a href="#最初（来自CSDN，看到的也是转载贴，未注明出处，侵删）" class="headerlink" title="最初（来自CSDN，看到的也是转载贴，未注明出处，侵删）"></a>最初（来自CSDN，看到的也是转载贴，未注明出处，侵删）</h3><p>其实这种工具类网上有很多，但个人感觉这个逻辑更加清晰，所以后面都是在这版的基础是进行修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConvertNumberToUpper</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数字金额大写转换，思想先写个完整的然后将如零拾替换成零 要用到正则表达式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">digitUppercase</span><span class="params">(<span class="keyword">double</span> n)</span> </span>&#123;</span><br><span class="line">        String fraction[] = &#123;<span class="string">"角"</span>, <span class="string">"分"</span>&#125;;</span><br><span class="line">        String digit[] = &#123;<span class="string">"零"</span>, <span class="string">"壹"</span>, <span class="string">"贰"</span>, <span class="string">"叁"</span>, <span class="string">"肆"</span>, <span class="string">"伍"</span>, <span class="string">"陆"</span>, <span class="string">"柒"</span>, <span class="string">"捌"</span>, <span class="string">"玖"</span>&#125;;</span><br><span class="line">        String unit[][] = &#123;&#123;<span class="string">"元"</span>, <span class="string">"万"</span>, <span class="string">"亿"</span>&#125;, &#123;<span class="string">""</span>, <span class="string">"拾"</span>, <span class="string">"佰"</span>, <span class="string">"仟"</span>&#125;&#125;;</span><br><span class="line">        String head = n &lt; <span class="number">0</span> ? <span class="string">"负"</span> : <span class="string">""</span>;</span><br><span class="line">        <span class="comment">// 如果是负数取绝对值</span></span><br><span class="line">        n = Math.abs(n);</span><br><span class="line">        <span class="comment">// 小数部分</span></span><br><span class="line">        String s = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fraction.length; i++) &#123;</span><br><span class="line">            <span class="comment">// Math.floor(a)返回大于或等于参数的最小（最接近负无穷大） double值，并等于数学整数，Math.pow(10, i)10的i次幂</span></span><br><span class="line">            s += (digit[(<span class="keyword">int</span>)(Math.floor(n * Math.pow(<span class="number">10</span>, i + <span class="number">1</span>)) % <span class="number">10</span>)] + fraction[i]).replaceAll(<span class="string">"(零.)+"</span>, <span class="string">""</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s.length() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            s = <span class="string">"整"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> integerPart = (<span class="keyword">int</span>)Math.floor(n);</span><br><span class="line">        <span class="comment">// 整数部分</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; unit[<span class="number">0</span>].length &amp;&amp; integerPart &gt; <span class="number">0</span>; i++) &#123;</span><br><span class="line">            String p = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; unit[<span class="number">1</span>].length &amp;&amp; n &gt; <span class="number">0</span>; j++) &#123;</span><br><span class="line">                p = digit[integerPart % <span class="number">10</span>] + unit[<span class="number">1</span>][j] + p;</span><br><span class="line">                integerPart = integerPart / <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            s = p.replaceAll(<span class="string">"(零.)*零$"</span>, <span class="string">""</span>).replaceAll(<span class="string">"^$"</span>, <span class="string">"零"</span>) + unit[<span class="number">0</span>][i] + s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head + s.replaceAll(<span class="string">"(零.)*零元"</span>, <span class="string">"元"</span>).replaceFirst(<span class="string">"(零.)+"</span>, <span class="string">""</span>).replaceAll(<span class="string">"(零.)+"</span>, <span class="string">"零"</span>).replaceAll(<span class="string">"^整$"</span>, <span class="string">"零元整"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>自己测试发现能满足业务需要，所以就直接拿来主义了！</p>
<p>后面自己review时发现原贴下面的一条评论是这样的</p>
<blockquote>
<p>Math.floor(n * 10 * Math.pow(10, i)) % 10)第一个方法里面，是否会因为double*10精度问题进行取整导致数据不正确？ 比如40899.84 * 10的double值408998.39999999….向下取整只会取到3，正好碰到了这个问题</p>
</blockquote>
<p>通过mian方法测试发现确实存在这个问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 这里使用System.err与System.out没有区别，只是会用红色字体显示，可以很清晰的看出与日志的区别，强烈建议在测试的时候使用</span></span><br><span class="line">    System.err.println(digitUppercase(<span class="number">40899.84</span>));</span><br><span class="line">&#125;</span><br><span class="line">输出结果:肆万零捌佰玖拾玖元捌角叁分</span><br></pre></td></tr></table></figure>

<p>原因：Java中浮点类型运算会产生精度问题(二进制浮点运算引起)</p>
<p>尝试解决问题，思路是既然只有小数部分有问题就把小数部分截取后转换成整数处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConvertNumberToUpper</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">digitCapital</span><span class="params">(<span class="keyword">double</span> n)</span> </span>&#123;</span><br><span class="line">        String fraction[] = &#123;<span class="string">"角"</span>, <span class="string">"分"</span>&#125;;</span><br><span class="line">        String digit[] = &#123;<span class="string">"零"</span>, <span class="string">"壹"</span>, <span class="string">"贰"</span>, <span class="string">"叁"</span>, <span class="string">"肆"</span>, <span class="string">"伍"</span>, <span class="string">"陆"</span>, <span class="string">"柒"</span>, <span class="string">"捌"</span>, <span class="string">"玖"</span>&#125;;</span><br><span class="line">        String unit[][] = &#123;&#123;<span class="string">"元"</span>, <span class="string">"万"</span>, <span class="string">"亿"</span>&#125;, &#123;<span class="string">""</span>, <span class="string">"拾"</span>, <span class="string">"佰"</span>, <span class="string">"仟"</span>&#125;&#125;;</span><br><span class="line">	</span><br><span class="line">        String head = n &lt; <span class="number">0</span> ? <span class="string">"负"</span> : <span class="string">""</span>;</span><br><span class="line">        <span class="comment">// 如果是负数取绝对值</span></span><br><span class="line">        n = Math.abs(n);</span><br><span class="line">        String s = <span class="string">""</span>;</span><br><span class="line">        <span class="comment">// 由于n为double类型，所以整数如100转换后变为100.0</span></span><br><span class="line">        String nStr = n + <span class="string">""</span>;</span><br><span class="line">        <span class="comment">// 小数部分，小数点为特殊符号，在分割时需进行转义</span></span><br><span class="line">        String split = nStr.split(<span class="string">"\\."</span>)[<span class="number">1</span>];</span><br><span class="line">		<span class="comment">// 如果小数部分只有一位且为0，直接舍弃</span></span><br><span class="line">        <span class="keyword">if</span> (!(split.length() == <span class="number">1</span> &amp;&amp; <span class="string">"0"</span>.equals(split))) &#123;</span><br><span class="line">			<span class="comment">// 只精确到小数点后两位</span></span><br><span class="line">            <span class="keyword">if</span> (split.length() &gt; <span class="number">2</span>) &#123;</span><br><span class="line">                split = split.substring(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 将小数部分转换为整数</span></span><br><span class="line">            Integer integer = Integer.valueOf(split);</span><br><span class="line">            String p = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; split.length() &amp;&amp; i &lt; fraction.length; i++) &#123;</span><br><span class="line">                p = digit[integer % <span class="number">10</span>] + fraction[split.length() - i - <span class="number">1</span>] + p;</span><br><span class="line">                integer = integer / <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            s = p.replaceAll(<span class="string">"(零.)+"</span>, <span class="string">""</span>) + s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (s.length() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            s = <span class="string">"整"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> integerPart = (<span class="keyword">int</span>)Math.floor(n);</span><br><span class="line">        <span class="comment">// 整数部分</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; unit[<span class="number">0</span>].length &amp;&amp; integerPart &gt; <span class="number">0</span>; i++) &#123;</span><br><span class="line">            String p = <span class="string">""</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; unit[<span class="number">1</span>].length &amp;&amp; n &gt; <span class="number">0</span>; j++) &#123;</span><br><span class="line">                p = digit[integerPart % <span class="number">10</span>] + unit[<span class="number">1</span>][j] + p;</span><br><span class="line">                integerPart = integerPart / <span class="number">10</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            s = p.replaceAll(<span class="string">"(零.)*零$"</span>, <span class="string">""</span>).replaceAll(<span class="string">"^$"</span>, <span class="string">"零"</span>) + unit[<span class="number">0</span>][i] + s;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> head + s.replaceAll(<span class="string">"(零.)*零元"</span>, <span class="string">"元"</span>).replaceFirst(<span class="string">"(零.)+"</span>, <span class="string">""</span>).replaceAll(<span class="string">"(零.)+"</span>, <span class="string">"零"</span>).replaceAll(<span class="string">"^整$"</span>, <span class="string">"零元整"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>测试发现解决了上面的问题</p>
<p>然而又发现新的问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    System.err.println(digitCapital(<span class="number">40800099.84</span>));</span><br><span class="line">&#125;</span><br><span class="line">输出结果:肆仟捌拾万零玖拾玖元捌分</span><br></pre></td></tr></table></figure>

<p>这是因为java中对过大的数据采用科学计数法表示，debug会发现传到方法中的n已经变为<code>4.080009984E7</code></p>
<img src="http://oss.forestyoung.top/Java数字金额(1).png"/>

<p>然后就是解决问题了，思路就是不使用科学计数法表示数据</p>
<p>查资料发现有两种方式实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 方法一</span></span><br><span class="line">NumberFormat nf = NumberFormat.getInstance();</span><br><span class="line">nf.setGroupingUsed(<span class="keyword">false</span>);</span><br><span class="line">String nStr = nf.format(n);</span><br><span class="line"><span class="comment">//方法二</span></span><br><span class="line">BigDecimal bigDecimal = <span class="keyword">new</span> BigDecimal(Double.valueOf(n).toString());</span><br><span class="line">String nStr = bigDecimal.toString();</span><br></pre></td></tr></table></figure>

<p>通过下面简单测试，发现方法二的效率明显要好于方法一</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">digitCapital</span><span class="params">(<span class="keyword">double</span> n)</span> </span>&#123;</span><br><span class="line">    String fraction[] = &#123;<span class="string">"角"</span>, <span class="string">"分"</span>&#125;;</span><br><span class="line">    String digit[] = &#123;<span class="string">"零"</span>, <span class="string">"壹"</span>, <span class="string">"贰"</span>, <span class="string">"叁"</span>, <span class="string">"肆"</span>, <span class="string">"伍"</span>, <span class="string">"陆"</span>, <span class="string">"柒"</span>, <span class="string">"捌"</span>, <span class="string">"玖"</span>&#125;;</span><br><span class="line">    String unit[][] = &#123;&#123;<span class="string">"元"</span>, <span class="string">"万"</span>, <span class="string">"亿"</span>&#125;, &#123;<span class="string">""</span>, <span class="string">"拾"</span>, <span class="string">"佰"</span>, <span class="string">"仟"</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">    String head = n &lt; <span class="number">0</span> ? <span class="string">"负"</span> : <span class="string">""</span>;</span><br><span class="line">    <span class="comment">// 如果是负数取绝对值</span></span><br><span class="line">    n = Math.abs(n);</span><br><span class="line">    String s = <span class="string">""</span>;</span><br><span class="line">    BigDecimal bigDecimal = <span class="keyword">new</span> BigDecimal(Double.valueOf(n).toString());</span><br><span class="line">    String nStr = bigDecimal.toString();</span><br><span class="line">    <span class="comment">// NumberFormat nf = NumberFormat.getInstance();</span></span><br><span class="line">    <span class="comment">// nf.setGroupingUsed(false);</span></span><br><span class="line">    <span class="comment">// String nStr = nf.format(n);</span></span><br><span class="line">    <span class="comment">// 由于n为double类型，所以整数如100转换后变为100.0</span></span><br><span class="line">    <span class="comment">// 小数部分</span></span><br><span class="line">    String[] split = nStr.split(<span class="string">"\\."</span>);</span><br><span class="line">    <span class="keyword">if</span> (split.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 小数点为特殊符号，在分割时需进行转义</span></span><br><span class="line">        String decimalStr = split[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (decimalStr.length() &gt; <span class="number">2</span>) &#123;</span><br><span class="line">            decimalStr = decimalStr.substring(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将小数部分转换为整数</span></span><br><span class="line">        Integer integer = Integer.valueOf(decimalStr);</span><br><span class="line">        String p = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; decimalStr.length() &amp;&amp; i &lt; fraction.length; i++) &#123;</span><br><span class="line">            p = digit[integer % <span class="number">10</span>] + fraction[decimalStr.length() - i - <span class="number">1</span>] + p;</span><br><span class="line">            integer = integer / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        s = p.replaceAll(<span class="string">"(零.)+"</span>, <span class="string">""</span>) + s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (s.length() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        s = <span class="string">"整"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> integerPart = (<span class="keyword">int</span>)Math.floor(n);</span><br><span class="line">    <span class="comment">// 整数部分</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; unit[<span class="number">0</span>].length &amp;&amp; integerPart &gt; <span class="number">0</span>; i++) &#123;</span><br><span class="line">        String p = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; unit[<span class="number">1</span>].length &amp;&amp; n &gt; <span class="number">0</span>; j++) &#123;</span><br><span class="line">            p = digit[integerPart % <span class="number">10</span>] + unit[<span class="number">1</span>][j] + p;</span><br><span class="line">            integerPart = integerPart / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        s = p.replaceAll(<span class="string">"(零.)*零$"</span>, <span class="string">""</span>).replaceAll(<span class="string">"^$"</span>, <span class="string">"零"</span>) + unit[<span class="number">0</span>][i] + s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head + s.replaceAll(<span class="string">"(零.)*零元"</span>, <span class="string">"元"</span>).replaceFirst(<span class="string">"(零.)+"</span>, <span class="string">""</span>).replaceAll(<span class="string">"(零.)+"</span>, <span class="string">"零"</span>).replaceAll(<span class="string">"^整$"</span>, <span class="string">"零元整"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">long</span> t1 = System.currentTimeMillis();</span><br><span class="line">    System.err.println(digitCapital(<span class="number">1234340899.011231</span>));</span><br><span class="line">    <span class="keyword">long</span> t2 = System.currentTimeMillis();</span><br><span class="line">    System.err.println(t2 - t1);</span><br><span class="line">    <span class="keyword">long</span> t3 = System.currentTimeMillis();</span><br><span class="line">    System.err.println(digitCapital(<span class="number">1234340899.011231</span>));</span><br><span class="line">    <span class="keyword">long</span> t4 = System.currentTimeMillis();</span><br><span class="line">    System.err.println(t4 - t3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="最终版"><a href="#最终版" class="headerlink" title="最终版"></a>最终版</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">digitCapital</span><span class="params">(<span class="keyword">double</span> n)</span> </span>&#123;</span><br><span class="line">    String fraction[] = &#123;<span class="string">"角"</span>, <span class="string">"分"</span>&#125;;</span><br><span class="line">    String digit[] = &#123;<span class="string">"零"</span>, <span class="string">"壹"</span>, <span class="string">"贰"</span>, <span class="string">"叁"</span>, <span class="string">"肆"</span>, <span class="string">"伍"</span>, <span class="string">"陆"</span>, <span class="string">"柒"</span>, <span class="string">"捌"</span>, <span class="string">"玖"</span>&#125;;</span><br><span class="line">    String unit[][] = &#123;&#123;<span class="string">"元"</span>, <span class="string">"万"</span>, <span class="string">"亿"</span>&#125;, &#123;<span class="string">""</span>, <span class="string">"拾"</span>, <span class="string">"佰"</span>, <span class="string">"仟"</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">    String head = n &lt; <span class="number">0</span> ? <span class="string">"负"</span> : <span class="string">""</span>;</span><br><span class="line">    <span class="comment">// 如果是负数取绝对值</span></span><br><span class="line">    n = Math.abs(n);</span><br><span class="line">    String s = <span class="string">""</span>;</span><br><span class="line">    BigDecimal bigDecimal = <span class="keyword">new</span> BigDecimal(Double.valueOf(n).toString());</span><br><span class="line">    String nStr = bigDecimal.toString();</span><br><span class="line">    <span class="comment">// 小数部分</span></span><br><span class="line">    String[] split = nStr.split(<span class="string">"\\."</span>);</span><br><span class="line">    <span class="keyword">if</span> (split.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="comment">// 小数点为特殊符号，在分割时需进行转义</span></span><br><span class="line">        String decimalStr = split[<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span> (decimalStr.length() &gt; <span class="number">2</span>) &#123;</span><br><span class="line">            decimalStr = decimalStr.substring(<span class="number">0</span>, <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 将小数部分转换为整数</span></span><br><span class="line">        Integer integer = Integer.valueOf(decimalStr);</span><br><span class="line">        String p = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; decimalStr.length() &amp;&amp; i &lt; fraction.length; i++) &#123;</span><br><span class="line">            p = digit[integer % <span class="number">10</span>] + fraction[decimalStr.length() - i - <span class="number">1</span>] + p;</span><br><span class="line">            integer = integer / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        s = p.replaceAll(<span class="string">"(零.)+"</span>, <span class="string">""</span>) + s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (s.length() &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        s = <span class="string">"整"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> integerPart = (<span class="keyword">int</span>)Math.floor(n);</span><br><span class="line">    <span class="comment">// 整数部分</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; unit[<span class="number">0</span>].length &amp;&amp; integerPart &gt; <span class="number">0</span>; i++) &#123;</span><br><span class="line">        String p = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; unit[<span class="number">1</span>].length &amp;&amp; n &gt; <span class="number">0</span>; j++) &#123;</span><br><span class="line">            p = digit[integerPart % <span class="number">10</span>] + unit[<span class="number">1</span>][j] + p;</span><br><span class="line">            integerPart = integerPart / <span class="number">10</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        s = p.replaceAll(<span class="string">"(零.)*零$"</span>, <span class="string">""</span>).replaceAll(<span class="string">"^$"</span>, <span class="string">"零"</span>) + unit[<span class="number">0</span>][i] + s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> head + s.replaceAll(<span class="string">"(零.)*零元"</span>, <span class="string">"元"</span>).replaceFirst(<span class="string">"(零.)+"</span>, <span class="string">""</span>).replaceAll(<span class="string">"(零.)+"</span>, <span class="string">"零"</span>).replaceAll(<span class="string">"^整$"</span>, <span class="string">"零元整"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>:Integer的取值范围是从-2147483648 至 214748364，超过该范围就会按最大值计算</p>
]]></content>
      <categories>
        <category>代码实现</category>
      </categories>
      <tags>
        <tag>工具类</tag>
      </tags>
  </entry>
  <entry>
    <title>开发问题合集</title>
    <url>/2020/05/16/%E5%BC%80%E5%8F%91%E9%97%AE%E9%A2%98%E5%90%88%E9%9B%86/</url>
    <content><![CDATA[<p><img src="http://oss.forestyoung.top/tunnel-5122424_1920.jpg" alt=""></p>
<a id="more"></a>

<h3 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h3><p><a href="https://juejin.im/post/5d9c4c1bf265da5b5d2047a2" target="_blank" rel="noopener">阿里云自建图床</a></p>
<h3 id="OAuth2-0"><a href="#OAuth2-0" class="headerlink" title="OAuth2.0"></a>OAuth2.0</h3><blockquote>
<p>OAuth2是一个基于令牌的安全验证和授权框架，有四种类型的授权：1密码，2客户端凭证，3授权码，4隐式</p>
<p>Access token:令牌，用于访问受保护资源</p>
<p>Refresh token:刷新token，在access token失效时通过refresh token重新获取access token</p>
<p>Expires in:过期前的秒数</p>
<p>流程：用户登入访问授权服务器获取token，拿token请求受保护资源的服务器，受保护资源的服务器请求授权服务器校验token是否有效，有效则允许访问</p>
<p>JWT(JSON WEB Token):目的是为OAuth2令牌提供标准结构</p>
<p>JWT令牌编码使用Base64，由验证服务器签名，保证令牌没有被篡改。</p>
<p>JWT是密码签名的，接收该服务的微服务可以保证令牌的内容是有效的，因此，不需要调用验证服务来确认令牌的内容，因为令牌的签名可以被接收微服务确认，并且内容可以被接收微服务检查</p>
</blockquote>
<p><a href="https://www.cnblogs.com/blowing00/p/4521135.html" target="_blank" rel="noopener">简单介绍 Oauth2.0 原理</a></p>
<p><a href="https://www.c0nblogs.com/blowing00/p/4524132.html" target="_blank" rel="noopener">Access Token 与 Refresh Token</a></p>
<p><a href="https://juejin.im/post/5c1200ece51d4560f0435795" target="_blank" rel="noopener">基于 JWT + Refresh Token 的用户认证实践</a></p>
<p>![](<a href="http://oss.forestyoung.top/截屏2020-05-17" target="_blank" rel="noopener">http://oss.forestyoung.top/截屏2020-05-17</a> 上午2.34.42.png)</p>
<p><a href="https://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html" target="_blank" rel="noopener">JSON Web Token 入门教程</a></p>
]]></content>
      <categories>
        <category>开发问题</category>
      </categories>
      <tags>
        <tag>其它</tag>
      </tags>
  </entry>
  <entry>
    <title>http状态码</title>
    <url>/2019/02/13/http%E7%8A%B6%E6%80%81%E7%A0%81/</url>
    <content><![CDATA[<p><img src="http://oss.forestyoung.top/http%E7%8A%B6%E6%80%81%E7%A0%81.jpg" alt=""></p>
<a id="more"></a>

<p>100——客户必须继续发出请求</p>
<p>101——客户要求服务器根据请求转换HTTP协议版本</p>
<p>200——交易成功</p>
<p>201——提示知道新文件的URL</p>
<p>202——接受和处理、但处理未完成</p>
<p>203——返回信息不确定或不完整</p>
<p>204——请求收到，但返回信息为空</p>
<p>205——服务器完成了请求，用户代理必须复位当前已经浏览过的文件</p>
<p>206——服务器已经完成了部分用户的GET请求</p>
<p>300——请求的资源可在多处得到</p>
<p>301——删除请求数据</p>
<p>302——在其他地址发现了请求数据</p>
<p>303——建议客户访问其他URL或访问方式</p>
<p>304——客户端已经执行了GET，但文件未变化</p>
<p>305——请求的资源必须从服务器指定的地址得到</p>
<p>306——前一版本HTTP中使用的代码，现行版本中不再使用</p>
<p>307——申明请求的资源临时性删除</p>
<p>400——错误请求，如语法错误</p>
<p>401——请求授权失败</p>
<p>402——保留有效ChargeTo头响应</p>
<p>403——请求不允许</p>
<p>404——没有发现文件、查询或URl</p>
<p>405——用户在Request-Line字段定义的方法不允许</p>
<p>406——根据用户发送的Accept拖，请求资源不可访问</p>
<p>407——类似401，用户必须首先在代理服务器上得到授权</p>
<p>408——客户端没有在用户指定的时间内完成请求</p>
<p>409——对当前资源状态，请求不能完成</p>
<p>410——服务器上不再有此资源且无进一步的参考地址</p>
<p>411——服务器拒绝用户定义的Content-Length属性请求</p>
<p>412——一个或多个请求头字段在当前请求中错误</p>
<p>413——请求的资源大于服务器允许的大小</p>
<p>414——请求的资源URL长于服务器允许的长度</p>
<p>415——请求资源不支持请求项目格式</p>
<p>416——请求中包含Range请求头字段，在当前请求资源范围内没有range指示值，请求也不包含If-Range请求头字段</p>
<p>417——服务器不满足请求Expect头字段指定的期望值，如果是代理服务器，可能是下一级服务器不能满足请求</p>
<p>500——服务器产生内部错误</p>
<p>501——服务器不支持请求的函数</p>
<p>502——服务器暂时不可用，有时是为了防止发生系统过载</p>
<p>503——服务器过载或暂停维修</p>
<p>504——关口过载，服务器使用另一个关口或服务来响应用户，等待时间设定值较长</p>
<p>505——服务器不支持或拒绝支请求头中指定的HTTP版本</p>
]]></content>
      <categories>
        <category>API</category>
      </categories>
      <tags>
        <tag>HTTP</tag>
      </tags>
  </entry>
  <entry>
    <title>大数据和Hadoop概述</title>
    <url>/2020/05/09/%E5%A4%A7%E6%95%B0%E6%8D%AE%E5%92%8CHadoop%E6%A6%82%E8%BF%B0/</url>
    <content><![CDATA[<p><img src="http://oss.forestyoung.top/outdoors-5129182_1920.jpg" alt=""></p>
<a id="more"></a>

<h2 id="大数据"><a href="#大数据" class="headerlink" title="大数据"></a>大数据</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><blockquote>
<p>大数据：指无法在一定时间范围内用常规软件工具进行捕捉、管理和处理的数据集合，是需要新处理模式才能具有更强的决策力、洞察发现力和流程优化能力的海量、高增长率和多样化的信息资产。</p>
</blockquote>
<h3 id="大数据部门组织结构"><a href="#大数据部门组织结构" class="headerlink" title="大数据部门组织结构"></a>大数据部门组织结构</h3><p><img src="http://oss.forestyoung.top/%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%83%A8%E9%97%A8%E7%BB%84%E7%BB%87%E7%BB%93%E6%9E%84.png" alt=""></p>
<h3 id="大数据技术生态体系"><a href="#大数据技术生态体系" class="headerlink" title="大数据技术生态体系"></a>大数据技术生态体系</h3><p><img src="http://oss.forestyoung.top/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E7%94%9F%E6%80%81%E4%BD%93%E7%B3%BB.png" alt=""></p>
<ul>
<li><p>Sqoop：Sqoop是一款开源的工具，主要用于在Hadoop、Hive与传统的数据库(MySql)间进行数据的传递，可以将一个关系型数据库（例如 ：MySQL，Oracle 等）中的数据导进到Hadoop的HDFS中，也可以将HDFS的数据导进到关系型数据库中。</p>
</li>
<li><p>Flume：Flume是Cloudera提供的一个高可用的，高可靠的，分布式的海量日志采集、聚合和传输的系统，Flume支持在日志系统中定制各类数据发送方，用于收集数据；同时，Flume提供对数据进行简单处理，并写到各种数据接受方（可定制）的能力。</p>
</li>
<li><p>Kafka：Kafka是一种高吞吐量的分布式发布订阅消息系统，有如下特性：</p>
<ol>
<li><p>通过O(1)的磁盘数据结构提供消息的持久化，这种结构对于即使数以TB的消息存储也能够保持长时间的稳定性能。</p>
</li>
<li><p>高吞吐量：即使是非常普通的硬件Kafka也可以支持每秒数百万的消息。</p>
</li>
<li><p>支持通过Kafka服务器和消费机集群来分区消息。</p>
</li>
<li><p>支持Hadoop并行数据加载。</p>
</li>
</ol>
</li>
<li><p>Storm：Storm用于“连续计算”，对数据流做连续查询，在计算时就将结果以流的形式输出给用户。</p>
</li>
<li><p>Spark：Spark是当前最流行的开源大数据内存计算框架。可以基于Hadoop上存储的大数据进行计算</p>
</li>
<li><p>Oozie：Oozie是一个管理Hdoop作业（job）的工作流程调度管理系统。</p>
</li>
<li><p>Hbase：HBase是一个分布式的、面向列的开源数据库。HBase不同于一般的关系数据库，它是一个适合于非结构化数据存储的数据库。</p>
</li>
<li><p>Hive：Hive是基于Hadoop的一个数据仓库工具，可以将结构化的数据文件映射为一张数据库表，并提供简单的SQL查询功能，可以将SQL语句转换为MapReduce任务进行运行。 其优点是学习成本低，可以通过类SQL语句快速实现简单的MapReduce统计，不必开发专门的MapReduce应用，十分适合数据仓库的统计分析。</p>
</li>
<li><p>R语言：R是用于统计分析、绘图的语言和操作环境。R是属于GNU系统的一个自由、免费、源代码开放的软件，它是一个用于统计计算和统计制图的优秀工具。</p>
</li>
<li><p>Mahout：Apache Mahout是个可扩展的机器学习和数据挖掘库。</p>
</li>
<li><p>ZooKeeper：Zookeeper是Google的Chubby一个开源的实现。它是一个针对大型分布式系统的可靠协调系统，提供的功能包括：配置维护、名字服务、 分布式同步、组服务等。ZooKeeper的目标就是封装好复杂易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户。</p>
</li>
</ul>
<h3 id="推荐系统框架图"><a href="#推荐系统框架图" class="headerlink" title="推荐系统框架图"></a>推荐系统框架图</h3><p><img src="http://oss.forestyoung.top/%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E6%A1%86%E6%9E%B6.png" alt=""></p>
<h2 id="Hadoop"><a href="#Hadoop" class="headerlink" title="Hadoop"></a>Hadoop</h2><h3 id="Hadoop简介"><a href="#Hadoop简介" class="headerlink" title="Hadoop简介"></a>Hadoop简介</h3><ul>
<li>Hadoop是一个由Apache基金会所开发的分布式系统基础架构</li>
<li>主要解决，海量数据的存储和海量数据的分析计算问题</li>
<li>广义上来说，Hadoop通常是指一个更广泛的概念——-Hadoop生态圈</li>
</ul>
<h3 id="Hadoop三大发行版本"><a href="#Hadoop三大发行版本" class="headerlink" title="Hadoop三大发行版本"></a>Hadoop三大发行版本</h3><ul>
<li>Apache:最原始最基础版本，对于入门学习最好</li>
<li>Cloudera:在大型互联网企业中用的较多</li>
<li>Hortonworks:文档较好</li>
</ul>
<h3 id="Hadoop的优势"><a href="#Hadoop的优势" class="headerlink" title="Hadoop的优势"></a>Hadoop的优势</h3><ul>
<li>高可靠性：Hadoop底层维护多个数据副本，所以即使Hadoop某个计算元素或存储出现故障，也不会导致数据的丢失。</li>
<li>高扩展性：在集群间分配任务数据，可方便的扩展数以千计的节点。</li>
<li>高效性：在MapReduce的思想下，Hadoop是并行工作的，以加快任务处理速度。</li>
<li>高容错性：能够自动将失败的任务重新分配。</li>
</ul>
<h3 id="Hadoop的组成"><a href="#Hadoop的组成" class="headerlink" title="Hadoop的组成"></a>Hadoop的组成</h3><p><img src="http://oss.forestyoung.top/Hadoop%E7%89%88%E6%9C%AC%E5%8C%BA%E5%88%AB.png" alt=""></p>
<p>包括两个核心组成：</p>
<blockquote>
<p>HDFS:分布式文件系统，存储海量的数据</p>
<p>MapReduce：并行处理框架，实现任务分解和调度</p>
</blockquote>
<h3 id="Hadoop可以用来做什么"><a href="#Hadoop可以用来做什么" class="headerlink" title="Hadoop可以用来做什么"></a>Hadoop可以用来做什么</h3><p>搭建大型数据仓库，PB级数据的存储、处理、分析、统计等业务</p>
]]></content>
      <categories>
        <category>大数据</category>
      </categories>
      <tags>
        <tag>Hadoop</tag>
      </tags>
  </entry>
  <entry>
    <title>多线程的挑战</title>
    <url>/2020/05/09/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%9A%84%E6%8C%91%E6%88%98/</url>
    <content><![CDATA[<p><img src="http://oss.forestyoung.top/autumn-4875907_1920.jpg" alt=""></p>
<a id="more"></a>

<h3 id="多线程的挑战"><a href="#多线程的挑战" class="headerlink" title="多线程的挑战"></a>多线程的挑战</h3><ul>
<li>上下文切换</li>
<li>死锁</li>
</ul>
<h4 id="上下文切换"><a href="#上下文切换" class="headerlink" title="上下文切换"></a>上下文切换</h4><blockquote>
<p>单核处理器也可通过CPU给每个线程分配时间片来实现多线程，因为时间片非常短，让人感觉是多个线程同时执行。</p>
<p>问题：切换过程中需要保存上一个任务的状态以便后面切回时恢复</p>
</blockquote>
<table>
<thead>
<tr>
<th align="left">循环次数</th>
<th align="left">串行执行耗时/ms</th>
<th align="left">并发执行耗时/ms</th>
<th align="left">并发比串行快多少</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1万</td>
<td align="left">0</td>
<td align="left">1</td>
<td align="left">慢</td>
</tr>
<tr>
<td align="left">10万</td>
<td align="left">2</td>
<td align="left">3</td>
<td align="left">慢</td>
</tr>
<tr>
<td align="left">100万</td>
<td align="left">5</td>
<td align="left">5</td>
<td align="left">差不多</td>
</tr>
<tr>
<td align="left">1000万</td>
<td align="left">9</td>
<td align="left">6</td>
<td align="left">1.5倍</td>
</tr>
<tr>
<td align="left">1亿</td>
<td align="left">54</td>
<td align="left">31</td>
<td align="left">接近1倍</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>多线程</category>
      </categories>
      <tags>
        <tag>多线程问题</tag>
      </tags>
  </entry>
  <entry>
    <title>获取阿里云临时授权访问STStoken</title>
    <url>/2019/03/07/%E8%8E%B7%E5%8F%96%E9%98%BF%E9%87%8C%E4%BA%91%E4%B8%B4%E6%97%B6%E6%8E%88%E6%9D%83%E8%AE%BF%E9%97%AESTStoken/</url>
    <content><![CDATA[<p><img src="http://oss.forestyoung.top/%E8%8E%B7%E5%8F%96STStoken.jpg" alt=""></p>
<a id="more"></a>

<h3 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h3><p><a href="https://www.alibabacloud.com/help/zh/doc-detail/27364.htm?spm=a2c63.p38356.b99.35.5c778d840l5Eaw" target="_blank" rel="noopener">阿里云官方文档</a><br><a href="https://help.aliyun.com/document_detail/28788.html?spm=a2c4g.11186623.6.645.7f4a7905JfcrXA" target="_blank" rel="noopener">相关SDK</a></p>
<h3 id="RAM-和-STS-介绍"><a href="#RAM-和-STS-介绍" class="headerlink" title="RAM 和 STS 介绍"></a>RAM 和 STS 介绍</h3><blockquote>
<p>阿里云权限管理机制包括访问控制（Resource Access Management，简称 RAM）和安全凭证管理（Security Token Service，简称 STS），可以根据需求使用不同权限的子账号来访问表格存储，也支持为用户提供访问的临时授权。使用RAM和STS能极大地提高管理的灵活性和安全性。</p>
<p>RAM 的主要作用是控制账号系统的权限。通过使用 RAM 可以将在主账号的权限范围内创建子账号，给不同的子账号分配不同的权限，从而达到授权管理的目的。详情请参见<a href="https://www.alibabacloud.com/help/doc-detail/28627.htm" target="_blank" rel="noopener">访问控制产品帮忙文档</a>。</p>
<p>STS 是一个安全凭证（Token）的管理系统，用来授予临时的访问权限，这样就可以通过 STS 来完成对于临时用户的访问授权。</p>
</blockquote>
<h3 id="STS临时授权访问"><a href="#STS临时授权访问" class="headerlink" title="STS临时授权访问"></a>STS临时授权访问</h3><blockquote>
<p>RAM子账号都是可以长期正常使用的，发生泄露后如果无法及时解除权限，会非常危险。</p>
<p>当开发者的 app 被用户使用之后，用户的数据要写入 ram-test-dev 这个实例。当 app 的用户数据很多时，要求能够安全地授权给众多的 app 用户上传数据，并且保证多个用户之间存储的隔离。</p>
<p>类似这种场景需要临时访问权限，应该使用 STS 来完成。STS 可以指定复杂的策略来对特定的用户进行限制，仅提供最小的权限。</p>
</blockquote>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p><strong>1.创建和管理角色STS的AssumeRole接口的使用，需要在RAM中创建和管理角色</strong></p>
<p><strong>2.添加相关依赖</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--添加aliyun-java-sdk的相关依赖 start--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-sts<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-java-sdk-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--添加aliyun-java-sdk的相关依赖 end--&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>3.配置文件中添加所需请求参数</strong></p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment">#阿里云访问控制RAM子账户信息,需要登录阿里云控制台查看(Secret只在创建时可查看,需要做好备份)</span></span><br><span class="line"><span class="meta">aliyun.oss.accessKeyId</span>=<span class="string">#你的accessKeyId</span></span><br><span class="line"><span class="meta">aliyun.oss.accessKeySecret</span>=<span class="string">#你的accessKeySecret</span></span><br><span class="line"><span class="comment">#角色ID，在角色中进行授权，获取相应的权限</span></span><br><span class="line"><span class="meta">aliyun.sts.roleArn</span>=<span class="string">#你的roleArn</span></span><br><span class="line"><span class="comment">#指临时凭证的名称，一般来说建议使用不同的应用程序用户来区分。自定义(可不设置)</span></span><br><span class="line"><span class="meta">aliyun.sts.roleSessionName</span>=<span class="string">test</span></span><br></pre></td></tr></table></figure>

<p><strong>4.示例代码</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取Token返回结果</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: young</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span>: 2018年12月04日 13:56</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StsTokenVO</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访问密钥标识</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String accessKeyId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 访问密钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String accessKeySecret;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 安全令牌</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String securityToken;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StsTokenServiceImpl</span> <span class="keyword">implements</span> <span class="title">StsTokenService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Logger LOGGER = LoggerFactory.getLogger(StsTokenServiceImpl<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;aliyun.oss.accessKeyId&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String accessKeyId;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;aliyun.oss.accessKeySecret&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String accessKeySecret;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;aliyun.sts.roleArn&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String roleArn;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;aliyun.sts.roleSessionName&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String roleSessionName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * token失效时间，单位秒(不设置默认1小时,这里设置5分钟)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">// private static final Long durationSeconds= 300L;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String ENDPOINT = <span class="string">"sts.aliyuncs.com"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取STStoken接口</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span>:</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: StsTokenVO</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@author</span>: young</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@date</span>: 2018/12/4 13:59</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> StsTokenVO <span class="title">getStsToken</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        StsTokenVO tokenVO = <span class="keyword">new</span> StsTokenVO();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 添加endpoint（直接使用STS endpoint，前两个参数留空，无需添加region ID）</span></span><br><span class="line">            DefaultProfile.addEndpoint(<span class="string">""</span>, <span class="string">""</span>, <span class="string">"Sts"</span>, ENDPOINT);</span><br><span class="line">            <span class="comment">// 构造default profile（参数留空，无需添加region ID）</span></span><br><span class="line">            IClientProfile profile = DefaultProfile.getProfile(<span class="string">""</span>, accessKeyId, accessKeySecret);</span><br><span class="line">            <span class="comment">// 用profile构造client</span></span><br><span class="line">            DefaultAcsClient client = <span class="keyword">new</span> DefaultAcsClient(profile);</span><br><span class="line">            <span class="keyword">final</span> AssumeRoleRequest request = <span class="keyword">new</span> AssumeRoleRequest();</span><br><span class="line">            request.setMethod(MethodType.POST);</span><br><span class="line">            request.setRoleArn(roleArn);</span><br><span class="line">            request.setRoleSessionName(roleSessionName);</span><br><span class="line">            <span class="comment">// request.setDurationSeconds(durationSeconds);</span></span><br><span class="line">            <span class="comment">// 针对该临时权限可以根据该属性赋予规则，格式为json，没有特殊要求，默认为空</span></span><br><span class="line">            <span class="comment">// request.setPolicy(policy); // Optional</span></span><br><span class="line">            <span class="keyword">final</span> AssumeRoleResponse response = client.getAcsResponse(request);</span><br><span class="line">            AssumeRoleResponse.Credentials credentials = response.getCredentials();</span><br><span class="line">            tokenVO.setAccessKeyId(credentials.getAccessKeyId());</span><br><span class="line">            tokenVO.setAccessKeySecret(credentials.getAccessKeySecret());</span><br><span class="line">            tokenVO.setSecurityToken(credentials.getSecurityToken());</span><br><span class="line">            <span class="keyword">return</span> tokenVO;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClientException e) &#123;</span><br><span class="line">            LOGGER.error(<span class="string">"获取阿里云STS临时授权权限失败，错误信息："</span> + e);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>代码实现</category>
      </categories>
      <tags>
        <tag>阿里云</tag>
      </tags>
  </entry>
</search>
